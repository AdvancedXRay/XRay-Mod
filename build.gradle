plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
    id 'net.neoforged.gradle.mixin' version '7.0.57'
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

version = mod_version
group = 'pro.mikey'

base {
    archivesName = "advanced-xray-neoforge"
}

mixin {
    config 'xray.mixins.json'
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

def replaceProperties = [
    minecraft_version: minecraft_version,
    minecraft_version_range: minecraft_version_range.replace("[%base]", minecraft_version),
    forge_version_range: forge_version.split("\\.").first(),
    version: version,
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${forge_version}"

}

repositories {
    maven {
        url "https://maven.saps.dev/mirror"
    }
}

compileJava {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            from components.java
        }
    }

    repositories {
        def token = providers.environmentVariable("SAPS_TOKEN");
        if (token.isPresent()) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mikeymods"
                    password = token.get()
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_DEPLOY_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    curseforge {
        accessToken = providers.environmentVariable("CURSE_DEPLOY_TOKEN")
        projectId = "${curse_id}"
        minecraftVersions.add("${minecraft_version}")
        modLoaders.add("neoforge")
        displayName = "[NEOFORGE] [${minecraft_version}] ${project.name} ${mod_version}"
        file = project.tasks.jar.archiveFile
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "AdvancedXRay/XRay-Mod"
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")

        file = project.tasks.jar.archiveFile
    }
}
