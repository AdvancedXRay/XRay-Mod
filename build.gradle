plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

version = mod_version
group = 'pro.mikey'

base {
    archivesName = "advanced-xray-neoforge"
}

neoForge {
    version = project.forge_version
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

def replaceProperties = [
    minecraft_version: minecraft_version,
    minecraft_version_range: minecraft_version_range.replace("[%base]", minecraft_version),
    forge_version_range: forge_version_range,
    version: version,
]

processResources {
    inputs.properties replaceProperties

    filesMatching("META-INF/neoforge.mods.toml") {
        expand replaceProperties
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases"
    }
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            from components.java
        }
    }

    repositories {
        def token = providers.environmentVariable("SAPS_TOKEN");
        if (token.isPresent()) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mikeymods"
                    password = token.get()
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_DEPLOY_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    curseforge {
        accessToken = providers.environmentVariable("CURSE_DEPLOY_TOKEN")
        projectId = "${curse_id}"
        minecraftVersions.add("${minecraft_version}")
        modLoaders.add("neoforge")
        displayName = "[NEOFORGE] [${minecraft_version}] ${project.name} ${mod_version}"
        file = project.tasks.jar.archiveFile
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "AdvancedXRay/XRay-Mod"
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")

        file = project.tasks.jar.archiveFile
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
