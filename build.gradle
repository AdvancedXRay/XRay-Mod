plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
    id 'org.spongepowered.mixin' version '0.7.+'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

version = mod_version
group = 'pro.mikey'

base {
    archivesName = "advanced-xray-forge"
}

mixin {
    add sourceSets.main, 'xray.mixins.refmap.json'
    config 'xray.mixins.json'
}

minecraft {
    mappings channel: "official", version: minecraft_version

    copyIdeResources = true
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

def replaceProperties = [
    minecraft_version: minecraft_version,
    minecraft_version_range: minecraft_version_range.replace("[%base]", minecraft_version),
    forge_version_range: forge_version.split("\\.").first(),
    version: version,
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

repositories {
    maven {
        url "https://maven.saps.dev/mirror"
    }
}

compileJava {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : "Advanced XRay",
                'Specification-Vendor'    : "Advanced XRay Team",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "Advanced XRay Team",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            artifact jar
        }
    }

    repositories {
        def token = providers.environmentVariable("SAPS_TOKEN");
        if (token.isPresent()) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mikeymods"
                    password = token.get()
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_DEPLOY_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    curseforge {
        accessToken = providers.environmentVariable("CURSE_DEPLOY_TOKEN")
        projectId = "${curse_id}"
        minecraftVersions.add("${minecraft_version}")
        modLoaders.add("forge")
        displayName = "[FORGE] [${minecraft_version}] ${project.name} ${mod_version}"
        file = project.tasks.jar.archiveFile
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "AdvancedXRay/XRay-Mod"
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")

        file = project.tasks.jar.archiveFile
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

tasks.register("idePostSync") {

}
